{"version":3,"sources":["components/Sidebar.js","containers/Sidebar.js","components/Message.js","components/MessagesList.js","containers/MessageList.js","actions/index.js","components/AddMessage.js","containers/AddMessage.js","constants/ActionTypes.js","App.js","reducers/messages.js","reducers/users.js","reducers/index.js","socket/index.js","saga/index.js","utils/name.js","index.js"],"names":["SidebarComponent","users","id","className","map","user","key","name","Sidebar","connect","state","MessageComponent","message","author","style","border","margin","padding","borderRadius","maxWidth","marginLeft","display","flexDirection","MessagesListComponent","messages","minWidth","Message","Key","MessageList","MessageListsComponent","nextMessageId","nextUserId","AddMessageComponent","props","input","onKeyPress","e","dispatch","value","type","ref","node","AddMessage","addMessage","App","Component","action","concat","console","log","chat","combineReducers","setUpSocket","username","socket","WebSocket","onopen","send","JSON","stringify","onmessage","event","data","parse","handleNewMessage","params","takeEvery","chance","Chance","first","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6721131.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst SidebarComponent = ({users})=>(\n    <aside id='sidebar' className='sidebar'>\n        <ul>\n            {users.map(user=>(\n            <li key={user.id}>{user.name}</li>\n            ))}\n        </ul>\n    </aside>\n)\n\n// SidebarComponent.PropTypes= {\n//     users : PropTypes.arrayOf(\n//         PropTypes.shape({\n//             name: PropTypes.string.isRequired,\n//             id: PropTypes.number.isRequired\n//         }).isRequired\n//     ).isRequired\n// }\n\nexport default SidebarComponent","import {connect} from 'react-redux'\nimport SidebarComponent from '../components/Sidebar'\n\nexport const Sidebar = connect(state=>({\n    users: state.users\n}), {})(SidebarComponent)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst MessageComponent = ({ message, author }) => (\n  <div style={{\n    border: \"solid grey 1.5px\", margin: \"4px\", padding: \"9px\", borderRadius: \"10px\", maxWidth: \"fit-content\",\n    marginLeft: author != 'Me' ? \"0px\" : \"auto\"\n  }}>\n    <div >\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}><small><b>{author}:</b></small><i> {message}</i></div>\n    </div>\n  </div>\n)\n// MessageComponent.PropTypes= {\n//     message: PropTypes.string.isRequired,\n//     author: PropTypes.string.isRequired\n// }\n\nexport default MessageComponent","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Message from \"./Message\";\n\nconst MessagesListComponent = ({ messages }) => (\n  <section id=\"message-list\">\n    <div style={{ display: \"flex\", flexDirection: \"column\", minWidth: \"100%\" }}>\n      {messages.map(message => (\n        <Message\n          Key={message.id}\n          {...message} />\n      ))}\n    </div>\n  </section>\n)\n\n// MessagesListComponent.PropTypes={\n//     messages: PropTypes.arrayOf(\n//         PropTypes.shape({\n//             id: PropTypes.number.isRequired,\n//             author: PropTypes.string.isRequired,\n//             messages: PropTypes.string.isRequired,\n//         }).isRequired\n//     ).isRequired\n// }\nexport default MessagesListComponent","import {connect} from 'react-redux'\nimport MessageListsComponent from '../components/MessagesList'\n\nexport const MessageList = connect(state=>({\n    messages: state.messages\n}), {})(MessageListsComponent)","import * as types from './../constants/ActionTypes'\nlet nextMessageId = 0\nlet nextUserId = 0\n\nexport const addMessage = (message, author) => ({\n    type:  types.ADD_MESSAGE,\n    id: nextMessageId++,\n    message,\n    author\n})\n\nexport const addUser = (name) =>{\n    console.log(name)\n    return({\n    type: types.ADD_USER,\n    id: nextUserId++, \n    name\n}\n)}\n\nexport const messageRecieved = (message, author)=>({\n    type: types.MESSAGE_RECEIVED,\n    id: nextMessageId++,\n    message,\n    author\n})\n\nexport const populateUserList = users=>({\n    type: types.USERS_LIST,\n    users\n})","import React from 'react'\nimport PropTypes from 'prop-types'\n const AddMessageComponent = (props)=>{\n    let input\n    return(\n        <section id =\"new-message\">\n            <input \n            onKeyPress = {\n                (e)=>{\n                    if(e.key === 'Enter'){\n                        props.dispatch(input.value, 'Me')\n                        input.value = ''\n                    }\n                }\n            } \n            type=\"text\"\n            ref={(node)=>{\n                    input = node\n                }}/>\n        </section>\n    )\n }\n//  AddMessageComponent.PropTypes ={\n//      dispatch: PropTypes.func.isRequired\n//  }\n export default AddMessageComponent","import { connect } from 'react-redux'\nimport {addMessage} from '../actions'\nimport AddMessageComponent from '../components/AddMessage'\n\nconst mapDispatchToProps  = dispatch =>({\n    dispatch: (message, author)=>{\n        dispatch(addMessage(message, author))\n    }\n})\n\nexport const AddMessage = connect(()=>({}), mapDispatchToProps)(AddMessageComponent)","export const ADD_MESSAGE = 'ADD_MESSAGE'\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED'\nexport const ADD_USER = 'ADD_USER'\nexport const USERS_LIST = 'USERS_LIST'","import React, { Component } from 'react';\nimport './App.css';\nimport {Sidebar} from './containers/Sidebar'\nimport {MessageList} from \"./containers/MessageList\"\nimport {AddMessage} from './containers/AddMessage'\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"container\">\n        <aside id = \"sidebar\"><Sidebar/></aside>\n        <section id=\"main\">\n        <section id= \"messages-list\"><MessageList/></section>\n        <section id= \"new-message\"><AddMessage/></section>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as types from './../constants/ActionTypes'\nconst messages = (state = [], action)=>{\n    switch (action.type) {\n        case types.ADD_MESSAGE:\n        case types.MESSAGE_RECEIVED:\n            return state.concat({\n                message:action.message,\n                author:action.author,\n                id:action.id\n            })\n        default:\n            return state;\n    }\n}\nexport default messages","\n\nimport * as types from '../constants/ActionTypes'\n\nconst users = (state = [], action) => {\n\tswitch (action.type) {\n\t\tcase types.ADD_USER:\n            console.log(\"action\")\n\t\t\treturn state.concat([\n\t\t\t\t\t{ name: action.name, id: action.id }\n\t\t\t\t])\n\t\tcase types.USERS_LIST:\n\t\t\treturn action.users\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default users","import { combineReducers } from \"redux\"\nimport messages from './messages'\nimport users from './users'\n\nconst chat = combineReducers({\n\tmessages,\n\tusers\n})\n\nexport default chat","import * as types from '../constants/ActionTypes'\nimport {addUser, messageRecieved, populateUserList } from '../actions/index'\nconst setUpSocket = (dispatch, username )=>{\n    const socket = new WebSocket('ws://localhost:3001')\n    socket.onopen= ()=>{\n        socket.send(JSON.stringify({\n            type: types.ADD_USER,\n            name: username\n        }))\n    }\n    socket.onmessage = (event)=>{\n        const data = JSON.parse(event.data)\n        switch (data.type) {\n            case types.ADD_MESSAGE:\n                dispatch(messageRecieved(data.message, data.author))\n                break;\n            case types.ADD_USER:\n                dispatch(addUser(data.name))\n                break;\n            case types.USERS_LIST:\n                dispatch(populateUserList(data.users))\n                break;\n            default:\n                break;\n        }\n    }\n    return socket\n}\nexport default setUpSocket","import {takeEvery} from 'redux-saga/effects'\nimport * as types from '../constants/ActionTypes'\nconst handleNewMessage = function* handleNewMessage(params) {\n    yield takeEvery(types.ADD_MESSAGE, (action)=>{\n        action.author = params.username\n        params.socket.send(JSON.stringify(action))\n    })\n}\nexport default handleNewMessage","import Chance from 'chance'\nlet chance = new Chance()\nexport default chance.first()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducers from './reducers'\nimport setUpSocket from './socket'\nimport handleNewMessage from './saga'\nimport username from './utils/name'\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n\treducers,\n\tapplyMiddleware(sagaMiddleware)\n)\nconst socket = setUpSocket(store.dispatch, username)\nsagaMiddleware.run(handleNewMessage, {socket, username})\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('root')\n);\n\n\n"],"sourceRoot":""}